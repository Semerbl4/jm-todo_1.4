{"version":3,"sources":["NewTaskForm/NewTaskForm.js","Task/Task.js","TaskList/TaskList.js","TaskFilter/TaskFilter.js","Footer/Footer.js","App/App.js","index.js"],"names":["NewTaskForm","state","value","this","addTask","props","className","placeholder","autoFocus","onChange","e","setState","target","onKeyDown","keyCode","React","Component","defaultProps","Task","completeToogler","completeChanged","id","currentTaskDestroyed","taskDestroyed","completed","taskText","taskCreateTime","type","onClick","defaultChecked","formatDistanceToNow","includeSeconds","defaultValue","Date","TaskList","todoData","currentFilter","arrTaskList","filter","el","slice","map","element","key","tasksFiltered","TaskFilter","activeButton","changeFilter","textContent","Footer","clearCompleted","uncompletedTasks","App","serverInfo","tasksRemain","forEach","newServerInfo","filterName","push","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1390bf11.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./NewTaskForm.css\";\r\n\r\nclass NewTaskForm extends React.Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  static defaultProps = {\r\n    addTask: () => {},\r\n  };\r\n\r\n  static propTypes = {\r\n    addTask: PropTypes.func,\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { addTask } = this.props;\r\n\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <input\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n          value={value}\r\n          autoFocus\r\n          onChange={(e) => {\r\n            this.setState({ value: e.target.value });\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.keyCode === 13 && e.target.value !== \"\") {\r\n              addTask(value);\r\n              this.setState({ value: \"\" });\r\n              // console.log(value);\r\n            }\r\n          }}\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTaskForm;\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\r\n\r\nimport \"./Task.css\";\r\n\r\nclass Task extends React.Component {\r\n  static defaultProps = {\r\n    completed: false,\r\n    taskText: \"\",\r\n    taskCreateTime: new Date(),\r\n  };\r\n\r\n  static propTypes = {\r\n    completed: PropTypes.bool,\r\n    taskText: PropTypes.string,\r\n    taskCreateTime: PropTypes.object,\r\n  };\r\n\r\n  completeToogler = () => {\r\n    this.props.completeChanged(this.props.id);\r\n  };\r\n\r\n  currentTaskDestroyed = () => {\r\n    let { id } = this.props;\r\n\r\n    this.props.taskDestroyed(id);\r\n  };\r\n\r\n  render() {\r\n    const { completed } = this.props;\r\n    const { taskText } = this.props;\r\n    const { taskCreateTime } = this.props;\r\n\r\n    // console.log(completed);\r\n    // console.log(this.props);\r\n    return (\r\n      <li className={completed ? \"completed\" : \"\"}>\r\n        <div className=\"view\">\r\n          <input\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            onClick={this.completeToogler}\r\n            defaultChecked={completed}\r\n          />\r\n          <label>\r\n            <span className=\"description\">{taskText}</span>\r\n            <span className=\"created\">\r\n              created{\" \"}\r\n              {formatDistanceToNow(taskCreateTime, { includeSeconds: true })}{\" \"}\r\n              ago\r\n            </span>\r\n          </label>\r\n          <button className=\"icon icon-edit\"></button>\r\n          <button\r\n            className=\"icon icon-destroy\"\r\n            onClick={this.currentTaskDestroyed}\r\n          ></button>\r\n        </div>\r\n        {this.props.className === \"editing\" ? (\r\n          <input\r\n            type=\"text\"\r\n            className=\"edit\"\r\n            defaultValue=\"Editing task\"\r\n          ></input>\r\n        ) : null}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./TaskList.css\";\r\n\r\nimport Task from \"../Task/Task\";\r\n\r\nlet TaskList = ({\r\n  todoData,\r\n  completeChanged,\r\n  taskDestroyed,\r\n  currentFilter,\r\n}) => {\r\n  let tasksFiltered = () => {\r\n    let arrTaskList;\r\n\r\n    if (currentFilter === \"Active\") {\r\n      arrTaskList = todoData.filter((el) => {\r\n        return el.completed === false;\r\n      });\r\n    }\r\n\r\n    if (currentFilter === \"Completed\") {\r\n      arrTaskList = todoData.filter((el) => {\r\n        return el.completed === true;\r\n      });\r\n    } else if (currentFilter === \"All\") {\r\n      arrTaskList = todoData.slice();\r\n    }\r\n\r\n    arrTaskList = arrTaskList.map((element) => {\r\n      return (\r\n        <Task\r\n          {...element}\r\n          key={element.id}\r\n          completeChanged={completeChanged}\r\n          taskDestroyed={taskDestroyed}\r\n        />\r\n      );\r\n    });\r\n\r\n    // console.log(currentFilter, arrTaskList, todoData);\r\n    return arrTaskList;\r\n  };\r\n\r\n  return <ul className=\"todo-list\">{tasksFiltered()}</ul>;\r\n};\r\n\r\nTaskList.defaultProps = {\r\n  todoData: [{}],\r\n  completeChanged: () => {},\r\n  taskDestroyed: () => {},\r\n  currentFilter: \"All\",\r\n};\r\n\r\nTaskList.propTypes = {\r\n  todoData: PropTypes.arrayOf(PropTypes.object),\r\n  completeChanged: PropTypes.func,\r\n  taskDestroyed: PropTypes.func,\r\n  currentFilter: PropTypes.string,\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./TaskFilter.css\";\r\n\r\nclass TaskFilter extends React.Component {\r\n  state = {\r\n    activeButton: \"All\",\r\n  };\r\n\r\n  static defaultProps = {\r\n    changeFilter: () => {},\r\n  };\r\n\r\n  static propTypes = {\r\n    changeFilter: PropTypes.func,\r\n  };\r\n\r\n  render() {\r\n    let { changeFilter } = this.props;\r\n    let { activeButton } = this.state;\r\n    return (\r\n      <ul\r\n        className=\"filters\"\r\n        onClick={(e) => {\r\n          changeFilter(e.target.textContent);\r\n          this.setState({\r\n            activeButton: e.target.textContent,\r\n          });\r\n        }}\r\n      >\r\n        <li>\r\n          <button className={activeButton === \"All\" ? \"selected\" : null}>\r\n            All\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className={activeButton === \"Active\" ? \"selected\" : null}>\r\n            Active\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className={activeButton === \"Completed\" ? \"selected\" : null}>\r\n            Completed\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskFilter;\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport TaskFilter from \"../TaskFilter/TaskFilter\";\r\n\r\nimport \"./Footer.css\";\r\n\r\nlet Footer = (props) => {\r\n  const { changeFilter } = props;\r\n  const { clearCompleted } = props;\r\n  const { uncompletedTasks } = props;\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">{uncompletedTasks()} items left</span>\r\n      <TaskFilter changeFilter={changeFilter} />\r\n      <button className=\"clear-completed\" onClick={clearCompleted}>\r\n        Clear completed\r\n      </button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nFooter.defaultProps = {\r\n  changeFilter: () => {},\r\n  clearCompleted: () => {},\r\n  uncompletedTasks: () => {},\r\n};\r\n\r\nFooter.propTypes = {\r\n  changeFilter: PropTypes.func,\r\n  clearCompleted: PropTypes.func,\r\n  uncompletedTasks: PropTypes.func,\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport NewTaskForm from \"../NewTaskForm/NewTaskForm\";\r\nimport TaskList from \"../TaskList/TaskList\";\r\nimport Footer from \"../Footer/Footer\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    serverInfo: [],\r\n    currentFilter: \"All\",\r\n  };\r\n\r\n  uncompletedTasks = () => {\r\n    let tasksRemain = 0;\r\n\r\n    this.state.serverInfo.forEach((el) => {\r\n      if (el.completed === false) {\r\n        tasksRemain++;\r\n      }\r\n    });\r\n    return tasksRemain;\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    let newServerInfo = this.state.serverInfo.filter((el) => {\r\n      return el.completed === false;\r\n    });\r\n\r\n    this.setState({ serverInfo: newServerInfo });\r\n  };\r\n\r\n  changeFilter = (filterName) => {\r\n    // console.log(filterName);\r\n\r\n    this.setState({ currentFilter: filterName });\r\n    // console.log(this.state);\r\n  };\r\n\r\n  addTask = (taskText) => {\r\n    const newServerInfo = [...this.state.serverInfo];\r\n\r\n    newServerInfo.push({\r\n      id: Math.random(),\r\n      completed: false,\r\n      taskText: taskText,\r\n      taskCreateTime: new Date(),\r\n    });\r\n\r\n    this.setState({ serverInfo: newServerInfo });\r\n  };\r\n\r\n  completeChanged = (id) => {\r\n    let { serverInfo } = this.state;\r\n    serverInfo = [...serverInfo];\r\n\r\n    let newServerInfo = serverInfo.map((el) => {\r\n      if (el.id === id) {\r\n        el.completed = !el.completed;\r\n      }\r\n      return el;\r\n    });\r\n    // console.log(\"меняем на completed\");\r\n    // console.log(newServerInfo);\r\n\r\n    this.setState({ serverInfo: newServerInfo });\r\n  };\r\n\r\n  taskDestroyed = (id) => {\r\n    let { serverInfo } = this.state;\r\n    serverInfo = [...serverInfo];\r\n\r\n    let newServerInfo = serverInfo.filter((el) => {\r\n      return el.id !== id;\r\n    });\r\n\r\n    this.setState({ serverInfo: newServerInfo });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <NewTaskForm addTask={this.addTask} />\r\n        <TaskList\r\n          todoData={this.state.serverInfo}\r\n          completeChanged={this.completeChanged}\r\n          taskDestroyed={this.taskDestroyed}\r\n          currentFilter={this.state.currentFilter}\r\n        />\r\n        <Footer\r\n          changeFilter={this.changeFilter}\r\n          clearCompleted={this.clearCompleted}\r\n          uncompletedTasks={this.uncompletedTasks}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}